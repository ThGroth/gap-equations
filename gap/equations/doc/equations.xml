<?xml version="1.0" encoding="UTF-8"?>

<!-- Reading PKGVERSIONDATA chunk from the PackageInfo.g file -->

<!DOCTYPE Book SYSTEM "gapdoc.dtd"
   [ <!ENTITY Package "<Package>Equations</Package>">
     <#Include Label="PKGVERSIONDATA">
   ]>

<!-- Documentation of the Equations package. -->

<Book Name="Equations"> 

<TitlePage>
  <Title>&Package;</Title>
  <Version>Version &VERSION;</Version>
  <Date>&RELEASEDATE;</Date>
  <Author> Thorsten Groth
    <Email>thorsten.groth@mathematik.uni-goettingen.de</Email>
  </Author>
    <Copyright> 
    <Index>License</Index>
    &copyright; 2016 by Thorsten Groth<P/>
    &Package; package is free software; 
    you can redistribute it and/or modify it under the terms of the 
    <URL Text="GNU General Public License">http://www.fsf.org/licenses/gpl.html</URL> 
    as published by the Free Software Foundation; either version 2 of the License, 
    or (at your option) any later version.
  </Copyright>
</TitlePage>

<TableOfContents/>

<Body>

<#Include SYSTEM "examples.xml">

<#Include SYSTEM "install.xml">

<Chapter><Heading>Example Session</Heading>
For example if one is interested how the decomposition
of a single commutator <M>g=[f,h]</M> into <M>g@2\cdot g@1</M> with 
<M>f=\langle\langle f_1,f_2\rangle\rangle\sigma_f</M> and
<M>h=\langle\langle h_1,h_2\rangle\rangle\sigma_h</M> looks like 
for all combinations of <M>\sigma_f,\sigma_h</M> one can find out by:
<Example><![CDATA[
gap> F := FreeGroup("f","h");; 
gap> S2 := SymmetricGroup(2);;
gap> acts := Cartesian([S2,S2]);;
gap> acts := List(acts,g->GroupHomomorphismByImages(F,S2,g));;
gap> eg := EquationGroup(FreeGroup([]),F);;
gap> eq := Equation(eg,[Comm(F.1,F.2)]);;
gap> deg := DecompositionEquationGroup(eg,2,[]);;
gap> for act in acts do
>       new := DecompositionEquation(deg,eq,act);
>       Print(Product(Reversed(EquationComponents(new))),"\n");
> od;
FreeProductElm([ f2^-1*h2^-1*f2*h2*f1^-1*h1^-1*f1*h1 ])
FreeProductElm([ f2^-1*h1^-1*f1*h1*f1^-1*h2^-1*f2*h2 ])
FreeProductElm([ f1^-1*h1^-1*f1*h2*f2^-1*h2^-1*f2*h1 ])
FreeProductElm([ f1^-1*h2^-1*f2*h1*f2^-1*h1^-1*f1*h2 ])
 ]]></Example>
</Chapter>

<Chapter><Heading>FreeProducts</Heading>
<Section><Heading>Construction</Heading>
This package installs some new method for the command 
<C>FreeProduct</C>. Before it was only possible to construct
free products of finitely presented groups.

<P/> If the resulting group was constructed
by the new methods they will be in the following 
filter: <C>IsGeneralFreeProduct</C>
</Section>
<Section><Heading>Filters</Heading>
<#Include Label="IsGeneralFreeProduct">
</Section>
<Section><Heading>Construction</Heading>
<#Include Label="GeneralFreeProduct">
</Section>
<Section><Heading>Elements</Heading>
<#Include Label="FreeProductElm">
There are two representations for this kind of elements. 
<#Include Label="IsFreeProductElmRep">
</Section>

<Section><Heading>Homomorphisms</Heading>
<#Include Label="FreeProductHomomorphism">
<#Include Label="IsFreeProductHomomorphismRep">  
</Section>
<Section>
<Heading>Other operations</Heading>
<#Include Label="Abs"> 
</Section>
</Chapter>
<Chapter><Heading>Equations</Heading>
We fix a set <M>X</M> and call its elements <E>variables</E>.  We assume
that <M>X</M> is infinite countable, is well ordered, and its family of finite
subsets is also well ordered, by size and then lexicographic order. We
denote by <M>F_X</M> the free group on the generating set <M>X</M>.
<P/>
  Let <M>G</M> be a group. The <E>equation group</E> will
  be the free product <M>G*F_X</M> and the elements belonging 
  to <M>G</M> will be called <E>constants</E>.
<P/>
  A <M>G</M>-equation is an element <M>E</M> of the group <M>F_X*G</M>
  regarded as a reduced word. For <M>E</M> a <M>G</M>-equation, its set of
  <E>variables</E> <M>\textup{Var}(E)\subset X</M> is the set of symbols in <M>X</M>
  that occur in it; namely, <M>\textup{Var}(E)</M> is the minimal subset of <M>X</M>
  such that <M>E</M> belongs to <M>F_{\textup{Var}(E)}*G</M>.
<P/> 
  A <E>quadratic</E> equation is an equation in which each variable
  <M>x\in\textup{Var}(E)</M> occurs exactly twice. A quadratic equation
  is called <E>oriented</E> if for each variable <M>x\in\textup{Var(X)}</M>
  both letters <M>x</M> and <M>x^{-1}</M> occure in the reduced word <M>E</M>.
<Section><Heading>Construction</Heading>
<#Include Label="EquationGroup">
<#Include Label="Equation">
</Section><Section><Heading>Homomorphisms</Heading>
  An <E>evaluation</E> is a <M>G</M>-homomorphism <M>e\colon F_{X} * G \to G</M>.
  A <E>solution</E> of an equation <M>E</M> is an evaluation <M>s</M>
  satisfying <M>s(E)=1</M>. If a solution exists for <M>E</M> then the
  equation <M>E</M> is called <E>solvable</E>. The set of elements
  <M>x\in X</M> with <M>s(x)\neq 1</M> is called the <E>support</E> of the solution.
<#Include Label="EquationHom">
</Section>
<Section><Heading>Normal Form</Heading>
<#Include Label="EquationNormalForm">
</Section>
</Chapter>
<Chapter><Heading>FR-Equations</Heading>
  <Section><Heading>Decomposable equations</Heading>
  For self-similar groups one strategy to solve equations is to consider
  the inherit equations by passing to states.
  To use this methods the package FR from Laurent Bartholdi is needed.
<P/>
  Let <M>G</M> be a group which lies in the filter <A>IsFRGroup</A> and which admitts 
  an embedding <M>\psi\colon G \to \tilde G\wr S_n</M> where <M>\tilde G </M> is the group
  generated by the states of the group <M>G</M>. Note that if <M>G</M> is a <E>self-similar</E>
  group then <M>G\simeq \tilde G</M>. Further let <M>F_X</M> be the free group on the 
  generating set <M>X</M>.  Given an equation group <M>G*F_X</M>
  we will the fix <M>n</M> natural embeddings <M>\varphi_i\colon F\to F_{X^n}</M> and 
  call the group <M>(\tilde G*F_{X^n})\wr S_n )</M> the <E>decomposition equation group</E> of
   <M>G*F_X</M>. The decomposition of an equation <M>e</M> with variables <M>x_1,\ldots ,x_k</M>
  with respect to a choice of activities <M>\sigma(x_i)\in S_n</M> for each variable <M>x_i</M> is
  the image of <M>e</M> under the homomorphism 
  <Table Align="rl"><Row>
     <Item><M>\Phi_\sigma\colon G*F_X</M></Item>
     <Item><M>\to (\tilde G*(F_{X^n})\wr S_n</M></Item>
     </Row><Row>
     <Item><M>x_i</M></Item>
     <Item><M>\mapsto\varphi_i(x_i)\cdot\sigma(x_i)</M></Item>
     </Row><Row>
      <Item><M>g</M></Item>
     <Item><M>\mapsto\psi_i(x_i)</M></Item>
      </Row></Table>
  <#Include Label="DecompositionEquation"> 
  <#Include Label="DecomposedEquationDisjointForm">   
</Section>
</Chapter>
</Body>

<#Include SYSTEM "hints.xml">

<TheIndex/>

</Book>

<!-- ==================================================================== -->

